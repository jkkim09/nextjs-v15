/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/message/v1/notifications-to/{profileId}/mark-as-read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['markAsReadAll'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/notifications-to/{profileId}/mark-as-read-all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['markAsReadAll_1'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/message-counters/{profileId}/new-notified/mark-as-checked': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['newNotifiedMarkAsChecked'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/sms/validation/request': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 인증코드 발송 요청
     * @description sms로 인증코드를 발송합니다. 개발서버에선 codeId에 그냥 인증코드 전달 드립니다.
     */
    post: operations['requestValidate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/sms/validation/code': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 인증코드 발송된 인증코드를 검증하는 api
     * @description 인증코드와 발송한 번호로 검증을 진행합니다.
     */
    post: operations['validateCode'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['add'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/notifications/fcm-token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * fcm 토큰 등록하기
     * @description fcm token을 등록하고 등록한 토큰 반환합니다. 이미 있을 때는 기획쪽 물어보고 처리합니다.
     */
    post: operations['addFcmToken'];
    /**
     * fcm 토큰 삭제하기
     * @description 등록해둔 fcm token를 삭제합니다.
     */
    delete: operations['deleteFcmToken'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/open-api/v1/sms/validation/request': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 인증코드 발송 요청
     * @description sms로 인증코드를 발송합니다. 개발서버에선 codeId에 그냥 인증코드 전달 드립니다.
     */
    post: operations['requestValidate_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/open-api/v1/sms/validation/code': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 인증코드 발송된 인증코드를 검증하는 api
     * @description 인증코드와 발송한 번호로 검증을 진행합니다.
     */
    post: operations['validateCode_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/notifications-to/{profileId}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['reads'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/notifications-to/{profileId}/not-read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notReads'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/v1/message-counters/{profileId}/new-notified': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['newNotified'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ApiResponseString: {
      /** Format: int32 */
      status: number;
      result?: string;
      /** Format: date-time */
      timestamp?: string;
      error?: string;
      debug?: string;
    };
    SmsUserValidateSendRequest: {
      /**
       * @description 국가코드를 포함한 사용자 핸드폰 번호(010으로 보내도 되도록 수정)
       * @example +8210XXXXYYYY
       */
      phoneNumber: string;
      /** @description 발송요청한 클라이언트 ip */
      ip: string;
      /**
       * Format: int32
       * @description 제한 시간 분수, 기본 3분
       * @default 3
       * @example 3
       */
      expiredIn: number;
    };
    ApiResponseSmsUserValidateSendResponse: {
      /** Format: int32 */
      status: number;
      result?: components['schemas']['SmsUserValidateSendResponse'];
      /** Format: date-time */
      timestamp?: string;
      error?: string;
      debug?: string;
    };
    SmsUserValidateSendResponse: {
      /** Format: int64 */
      codeId: number;
      /** Format: date-time */
      expiredAt: string;
    };
    SmsUserValidateRequest: {
      /**
       * @description 발송 요청했던 국가코드를 포함한 사용자 핸드폰 번호
       * @example +8210XXXXYYYY
       */
      phoneNumber: string;
      /** @description 요청했던 번호로 전송된 인증 코드 */
      validateCode: string;
    };
    ApiResponseUserValidationCodeState: {
      /** Format: int32 */
      status: number;
      /** @enum {string} */
      result?:
        | 'REQUESTED'
        | 'VALIDATED'
        | 'EXPIRED'
        | 'ALREADYVALIDATED'
        | 'NOTMATCHED'
        | 'FAILED';
      /** Format: date-time */
      timestamp?: string;
      error?: string;
      debug?: string;
    };
    NotificationRequest: {
      /** Format: int64 */
      receiverProfileId: number;
      /** Format: int64 */
      displayProfileId: number;
      displayProfileName?: string;
      displayProfilePhotoUrl?: string;
      body: string;
    };
    ApiResponseLong: {
      /** Format: int32 */
      status: number;
      /** Format: int64 */
      result?: number;
      /** Format: date-time */
      timestamp?: string;
      error?: string;
      debug?: string;
    };
    FcmTokenAddRequest: {
      /**
       * Format: int32
       * @description 계정 id. 없다면 토큰에서 추출
       */
      accountId?: number | null;
      /**
       * Format: int64
       * @description 프로필 id. 없다면 토큰에서 추출
       */
      profileId?: number | null;
      /** @description 디바이스 정보. 저장할게 있다면 전송 */
      deviceInfo?: string | null;
      /** @description fcm token */
      fcmToken: string;
    };
    ApiResponseNotificationPageListableResult: {
      /** Format: int32 */
      status: number;
      result?: components['schemas']['NotificationPageListableResult'];
      /** Format: date-time */
      timestamp?: string;
      error?: string;
      debug?: string;
    };
    NotificationPageListableResult: {
      items: components['schemas']['NotificationResult'][];
      /** Format: int32 */
      size: number;
      /** Format: int64 */
      nextOffset: number;
    };
    NotificationResult: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      receiverProfileId: number;
      /** Format: int64 */
      displayProfileId: number;
      displayProfileName?: string;
      displayProfilePhotoUrl?: string;
      body: string;
      /** Format: date-time */
      sentAt: string;
      /** Format: date-time */
      readAt?: string;
    };
    ApiResponseInteger: {
      /** Format: int32 */
      status: number;
      /** Format: int32 */
      result?: number;
      /** Format: date-time */
      timestamp?: string;
      error?: string;
      debug?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  markAsReadAll: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  markAsReadAll_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  newNotifiedMarkAsChecked: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  requestValidate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SmsUserValidateSendRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseSmsUserValidateSendResponse'];
        };
      };
    };
  };
  validateCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SmsUserValidateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUserValidationCodeState'];
        };
      };
    };
  };
  add: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NotificationRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseLong'];
        };
      };
    };
  };
  addFcmToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FcmTokenAddRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  deleteFcmToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FcmTokenAddRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  requestValidate_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SmsUserValidateSendRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseSmsUserValidateSendResponse'];
        };
      };
    };
  };
  validateCode_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SmsUserValidateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUserValidationCodeState'];
        };
      };
    };
  };
  reads: {
    parameters: {
      query?: {
        offset?: number;
        size?: number;
      };
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseNotificationPageListableResult'];
        };
      };
    };
  };
  notReads: {
    parameters: {
      query?: {
        offset?: number;
        size?: number;
      };
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseNotificationPageListableResult'];
        };
      };
    };
  };
  newNotified: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInteger'];
        };
      };
    };
  };
}
